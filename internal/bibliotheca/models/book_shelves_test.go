// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookShelves(t *testing.T) {
	t.Parallel()

	query := BookShelves()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookShelvesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookShelves().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookShelvesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BookShelves().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookShelves().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookShelvesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookShelfSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookShelves().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookShelvesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookShelfExists(ctx, tx, o.BookShelfID)
	if err != nil {
		t.Errorf("Unable to check if BookShelf exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookShelfExists to return true, but got false.")
	}
}

func testBookShelvesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookShelfFound, err := FindBookShelf(ctx, tx, o.BookShelfID)
	if err != nil {
		t.Error(err)
	}

	if bookShelfFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookShelvesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BookShelves().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookShelvesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BookShelves().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookShelvesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookShelfOne := &BookShelf{}
	bookShelfTwo := &BookShelf{}
	if err = randomize.Struct(seed, bookShelfOne, bookShelfDBTypes, false, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}
	if err = randomize.Struct(seed, bookShelfTwo, bookShelfDBTypes, false, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookShelfOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookShelfTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookShelves().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookShelvesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookShelfOne := &BookShelf{}
	bookShelfTwo := &BookShelf{}
	if err = randomize.Struct(seed, bookShelfOne, bookShelfDBTypes, false, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}
	if err = randomize.Struct(seed, bookShelfTwo, bookShelfDBTypes, false, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookShelfOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookShelfTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookShelves().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookShelfBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookShelf) error {
	*o = BookShelf{}
	return nil
}

func bookShelfAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookShelf) error {
	*o = BookShelf{}
	return nil
}

func bookShelfAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BookShelf) error {
	*o = BookShelf{}
	return nil
}

func bookShelfBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookShelf) error {
	*o = BookShelf{}
	return nil
}

func bookShelfAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookShelf) error {
	*o = BookShelf{}
	return nil
}

func bookShelfBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookShelf) error {
	*o = BookShelf{}
	return nil
}

func bookShelfAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookShelf) error {
	*o = BookShelf{}
	return nil
}

func bookShelfBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookShelf) error {
	*o = BookShelf{}
	return nil
}

func bookShelfAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookShelf) error {
	*o = BookShelf{}
	return nil
}

func testBookShelvesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BookShelf{}
	o := &BookShelf{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookShelfDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookShelf object: %s", err)
	}

	AddBookShelfHook(boil.BeforeInsertHook, bookShelfBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookShelfBeforeInsertHooks = []BookShelfHook{}

	AddBookShelfHook(boil.AfterInsertHook, bookShelfAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookShelfAfterInsertHooks = []BookShelfHook{}

	AddBookShelfHook(boil.AfterSelectHook, bookShelfAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookShelfAfterSelectHooks = []BookShelfHook{}

	AddBookShelfHook(boil.BeforeUpdateHook, bookShelfBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookShelfBeforeUpdateHooks = []BookShelfHook{}

	AddBookShelfHook(boil.AfterUpdateHook, bookShelfAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookShelfAfterUpdateHooks = []BookShelfHook{}

	AddBookShelfHook(boil.BeforeDeleteHook, bookShelfBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookShelfBeforeDeleteHooks = []BookShelfHook{}

	AddBookShelfHook(boil.AfterDeleteHook, bookShelfAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookShelfAfterDeleteHooks = []BookShelfHook{}

	AddBookShelfHook(boil.BeforeUpsertHook, bookShelfBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookShelfBeforeUpsertHooks = []BookShelfHook{}

	AddBookShelfHook(boil.AfterUpsertHook, bookShelfAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookShelfAfterUpsertHooks = []BookShelfHook{}
}

func testBookShelvesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookShelves().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookShelvesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookShelfColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BookShelves().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookShelfToManyBooks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookShelf
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BookShelfID = a.BookShelfID
	c.BookShelfID = a.BookShelfID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Books().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.BookShelfID == b.BookShelfID {
			bFound = true
		}
		if v.BookShelfID == c.BookShelfID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BookShelfSlice{&a}
	if err = a.L.LoadBooks(ctx, tx, false, (*[]*BookShelf)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Books); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Books = nil
	if err = a.L.LoadBooks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Books); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBookShelfToManyAddOpBooks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookShelf
	var b, c, d, e Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookShelfDBTypes, false, strmangle.SetComplement(bookShelfPrimaryKeyColumns, bookShelfColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Book{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Book{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBooks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.BookShelfID != first.BookShelfID {
			t.Error("foreign key was wrong value", a.BookShelfID, first.BookShelfID)
		}
		if a.BookShelfID != second.BookShelfID {
			t.Error("foreign key was wrong value", a.BookShelfID, second.BookShelfID)
		}

		if first.R.BookShelf != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BookShelf != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Books[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Books[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Books().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testBookShelfToOneGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BookShelf
	var foreign Group

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookShelfDBTypes, false, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, groupDBTypes, false, groupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Group struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GroupID = foreign.GroupID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GroupID != foreign.GroupID {
		t.Errorf("want: %v, got %v", foreign.GroupID, check.GroupID)
	}

	slice := BookShelfSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*BookShelf)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookShelfToOneSetOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookShelf
	var b, c Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookShelfDBTypes, false, strmangle.SetComplement(bookShelfPrimaryKeyColumns, bookShelfColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Group{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BookShelves[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GroupID != x.GroupID {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GroupID != x.GroupID {
			t.Error("foreign key was wrong value", a.GroupID, x.GroupID)
		}
	}
}

func testBookShelvesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookShelvesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookShelfSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookShelvesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookShelves().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookShelfDBTypes = map[string]string{`BookShelfID`: `integer`, `GroupID`: `integer`, `Name`: `character varying`, `UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`}
	_                = bytes.MinRead
)

func testBookShelvesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookShelfPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookShelfAllColumns) == len(bookShelfPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookShelves().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookShelvesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookShelfAllColumns) == len(bookShelfPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookShelf{}
	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookShelves().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookShelfDBTypes, true, bookShelfPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookShelfAllColumns, bookShelfPrimaryKeyColumns) {
		fields = bookShelfAllColumns
	} else {
		fields = strmangle.SetComplement(
			bookShelfAllColumns,
			bookShelfPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookShelfSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBookShelvesUpsert(t *testing.T) {
	t.Parallel()

	if len(bookShelfAllColumns) == len(bookShelfPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BookShelf{}
	if err = randomize.Struct(seed, &o, bookShelfDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookShelf: %s", err)
	}

	count, err := BookShelves().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookShelfDBTypes, false, bookShelfPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookShelf struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookShelf: %s", err)
	}

	count, err = BookShelves().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

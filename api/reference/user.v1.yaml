openapi: 3.0.0
info:
  title: User API
  version: '1.0'
  description: |
    # Authentication
    Use JWT comes form Firebase Authentication.
servers:
  - url: 'http://localhost:8080'
security:
  - firebaseAuth: []
paths:
  /v1/book-shelves/:
    get:
      summary: Get all bookshelves.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bookshelf'
      operationId: get-v1-book-shelves
      requestBody: {}
      tags:
        - ' book-shelf'
    parameters: []
  '/v1/book-shelves/{book-shelf-id}/books':
    get:
      summary: Get all books.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/book/book.v1.yaml
      operationId: get-v1-book-shelves-books
      tags:
        - book
    parameters:
      - $ref: '#/components/parameters/BookshelfId'
    post:
      summary: Create new book.
      operationId: post-v1-book-shelves-books
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/book/book.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/book/book-post-data.v1.yaml
      tags:
        - book
  '/v1/books/{book-id}':
    parameters:
      - $ref: '#/components/parameters/BookId'
    get:
      summary: Get the book.
      tags:
        - book
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/book/book.v1.yaml
      operationId: get-v1-books-book-id
    put:
      summary: Update the book date.
      operationId: put-v1-books-book-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/book/book.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/book/book-post-data.v1.yaml
      tags:
        - book
  '/v1/books/{book-id}/borrow':
    parameters:
      - schema:
          type: string
        name: book-id
        in: path
        required: true
    patch:
      summary: Borrow the book.
      tags:
        - book
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/book/book.v1.yaml
      operationId: patch-v1-books-book-id-borrow
  '/v1/books/{book-id}/return':
    parameters:
      - schema:
          type: string
        name: book-id
        in: path
        required: true
    patch:
      summary: Return the book.
      tags:
        - book
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/book/book.v1.yaml
      operationId: patch-v1-books-book-id-return
      description: ''
components:
  schemas:
    Bookshelf:
      title: Bookshelf
      type: object
      x-tags:
        - book
      properties:
        id:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - createdAt
        - updatedAt
  securitySchemes:
    firebaseAuth:
      name: Firebase Key
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    BookshelfId:
      schema:
        type: string
      name: book-shelf-id
      in: path
      required: true
    BookId:
      schema:
        type: string
      name: book-id
      in: path
      required: true
